AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Cognito User Pool (uksb-1tthgi812) (tag:cognito-user-pool)

Globals:
  Function:
    Runtime: python3.12
    CodeUri: .

  Api:
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers: 
        CognitoAuthorizer:
          UserPoolArn: !Ref CognitoAuthorizerUserPoolArn
          Identity:
            Headers:
              - Authorization
    AccessLogSetting:
      DestinationArn: !GetAtt AccessLogs.Arn
      Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "integrationStatus": $context.integrationStatus, "integrationLatency": $context.integrationLatency, "responseLength":"$context.responseLength" }'
    TracingEnabled: true

Parameters:
  CognitoAuthorizerUserPoolArn:
    Type: String
    Description: Cognito User Pool ARN

Resources:
  CustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/index.handler
      Timeout: 10
      MemorySize: 128
      Events:
        Customer:
          Type: Api
          Properties:
            Method: any
            Path: /{proxy+}

  AccessLogs:
    Type: AWS::Logs::LogGroup
    DependsOn: ApiLoggingRole
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/${AWS::StackName}/APIAccessCustomerLogs"

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
