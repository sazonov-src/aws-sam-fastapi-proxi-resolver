AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Cognito User Pool (uksb-1tthgi812) (tag:cognito-user-pool)

Parameters:
  CallbackUrl:
    Type: String

Globals:
  Function:
    Runtime: python3.12
    CodeUri: src/

Resources:
  
  CognitoAuthorizerUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      UserPoolName: cognito-user-pool-userpool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoAuthorizerUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      AllowedOAuthFlows: 
        - implicit
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes: 
        - email
        - openid
        - profile
      CallbackURLs: 
        - !Ref CallbackUrl
      ClientName: cognito-user-pool-client
      SupportedIdentityProviders: 
        - COGNITO
      UserPoolId: !Ref CognitoAuthorizerUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  CognitoAuthorizerUserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      Identifier: com.apigw
      Name: com.apigw
      Scopes: 
        - ScopeDescription: scope_description
          ScopeName: scope_name
      UserPoolId: !Ref CognitoAuthorizerUserPool
      
  CognitoAuthorizerUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub user-pool-domain-${AWS::AccountId}
      UserPoolId: !Ref CognitoAuthorizerUserPool

  CognitoAuthorizerUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Administrators
      Description: "Administrators group"
      UserPoolId: !Ref CognitoAuthorizerUserPool

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: user-pool-api

  ApiGatewayCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGateway
      ProviderARNs:
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoAuthorizerUserPool}"

  ApiGatewayResourceCustomer:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: customer
      RestApiId: !Ref ApiGateway

  ApiGatewayResourceAdmin:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: admin
      RestApiId: !Ref ApiGateway

  ApiGatewayMethodCustomer:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResourceCustomer
      RestApiId: !Ref ApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Customer endpoint"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ApiGatewayMethodAdmin:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResourceAdmin
      RestApiId: !Ref ApiGateway
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: '{"message": "Admin endpoint"}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod
    DependsOn:
      - ApiGatewayMethodCustomer
      - ApiGatewayMethodAdmin

Outputs:

  HostedUi:
    Description: Hosted UI
    Value: !Sub "https://${CognitoAuthorizerUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${CognitoAuthorizerUserPoolClient}&response_type=token&scope=email+openid+profile&redirect_uri=${CallbackUrl}"

  CustomerEndpoint:
    Description: Customer API Endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/customer/"

  AdminEndpoint:
    Description: Admin API Endpoint
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/admin/"

  ApiGatewayId:
    Description: API Gateway ID
    Value: !Ref ApiGateway

  CognitoUserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoAuthorizerUserPool

  CognitoUserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoAuthorizerUserPoolClient

  CognitoUserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub "${CognitoAuthorizerUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
